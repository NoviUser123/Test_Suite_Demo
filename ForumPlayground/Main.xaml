<Activity mc:Ignorable="sap sap2010" x:Class="Main" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:njl="clr-namespace:Newtonsoft.Json.Linq;assembly=Newtonsoft.Json" xmlns:s="clr-namespace:System;assembly=System.Private.CoreLib" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=System.Private.CoreLib" xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=System.Private.CoreLib" xmlns:sd="clr-namespace:System.Data;assembly=System.Data.Common" xmlns:str="clr-namespace:System.Text.RegularExpressions;assembly=System.Text.RegularExpressions" xmlns:ugm="clr-namespace:UiPath.GSuite.Models;assembly=UiPath.GSuite" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:upr="clr-namespace:UiPath.Platform.ResourceHandling;assembly=UiPath.Platform" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property Name="in_date" Type="InArgument(x:String)" />
  </x:Members>
  <VisualBasic.Settings>
    <x:Null />
  </VisualBasic.Settings>
  <sap2010:WorkflowViewState.IdRef>ActivityBuilder_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <sco:Collection x:TypeArguments="x:String">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Collections.ObjectModel</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>GlobalVariablesNamespace</x:String>
      <x:String>GlobalConstantsNamespace</x:String>
      <x:String>System.Reflection</x:String>
      <x:String>System.Linq.Expressions</x:String>
      <x:String>System.Runtime.Serialization</x:String>
      <x:String>System.Text.RegularExpressions</x:String>
      <x:String>System.Numerics</x:String>
      <x:String>UiPath.UIAutomationNext.Enums</x:String>
      <x:String>UiPath.UIAutomationCore.Contracts</x:String>
      <x:String>UiPath.UIAutomationNext.Activities.Services.RuntimeAnalyze</x:String>
      <x:String>UiPath.UIAutomationNext.Activities</x:String>
      <x:String>UiPath.Shared.Activities</x:String>
      <x:String>UiPath.Platform.ObjectLibrary</x:String>
      <x:String>UiPath.Platform.SyncObjects</x:String>
      <x:String>System.ComponentModel</x:String>
      <x:String>UiPath.UIAutomationNext.Models</x:String>
      <x:String>UiPath.CV</x:String>
      <x:String>UiPath.Shared.ObjectLibrary</x:String>
      <x:String>UiPath.CV.Activities</x:String>
      <x:String>UiPath.CV.Activities.Interfaces</x:String>
      <x:String>System.Xml.Serialization</x:String>
      <x:String>System.Drawing.Configuration</x:String>
      <x:String>System.Drawing.Imaging</x:String>
      <x:String>System.Runtime.InteropServices</x:String>
      <x:String>UiPath.Platform.ResourceHandling</x:String>
      <x:String>UiPath.Mail</x:String>
      <x:String>UiPath.Mail.Activities.Enums</x:String>
      <x:String>UiPath.Shared.Activities.Utils</x:String>
      <x:String>UiPath.Mail.Outlook.Activities</x:String>
      <x:String>UiPath.Mail.Activities</x:String>
      <x:String>UiPath.Excel</x:String>
      <x:String>UiPath.Excel.Activities.Business</x:String>
      <x:String>UiPath.Excel.Activities</x:String>
      <x:String>System.Security</x:String>
      <x:String>UiPath.Excel.Model</x:String>
      <x:String>UiPath.DataTableUtilities</x:String>
      <x:String>UiPath.PDF.Activities</x:String>
      <x:String>UiPath.PDF</x:String>
      <x:String>UiPath.Vision.OCR</x:String>
      <x:String>UiPath.OCR.Contracts</x:String>
      <x:String>UiPath.OCR.Activities</x:String>
      <x:String>UiPath.OCR.Contracts.Activities</x:String>
      <x:String>UiPath.Core.Activities.OCR.Engines</x:String>
      <x:String>UiPath.Vision.OmniPage.Core</x:String>
      <x:String>UiPath.OmniPage.Activities</x:String>
      <x:String>Microsoft.Office.Interop.Excel</x:String>
      <x:String>System.Globalization</x:String>
      <x:String>UiPath.UIAutomationNext.Contracts</x:String>
      <x:String>UiPath.UIAutomationNext.Models.CV</x:String>
      <x:String>UiPath.Testing.Activities</x:String>
      <x:String>UiPath.PDF.Activities.PDF</x:String>
      <x:String>UiPath.UIAutomationNext.Models.ExtractData</x:String>
      <x:String>UiPath.MicrosoftOffice365.Activities.Mail.Enums</x:String>
      <x:String>UiPath.Mail.SMTP.Activities</x:String>
      <x:String>System.Activities.Runtime.Collections</x:String>
      <x:String>UiPath.Mail.Activities.Business.HtmlEditor</x:String>
      <x:String>UiPath.Mail.Activities.Business</x:String>
      <x:String>Aspose.CAD</x:String>
      <x:String>Aspose.CAD.ImageOptions</x:String>
      <x:String>UiPath.Web</x:String>
      <x:String>UiPath.Web.Activities</x:String>
      <x:String>UiPath.Platform</x:String>
      <x:String>Newtonsoft.Json.Linq</x:String>
      <x:String>Newtonsoft.Json</x:String>
      <x:String>System.Dynamic</x:String>
      <x:String>System.Collections.Specialized</x:String>
      <x:String>UiPath.GSuite.Models</x:String>
      <x:String>UiPath.Shared.Api.Google.Gmail.Models</x:String>
      <x:String>UiPath.GSuite.Gmail.Models</x:String>
      <x:String>UiPath.GSuite.Activities.Gmail.Enums</x:String>
      <x:String>UiPath.GSuite.Activities.Gmail.Filters</x:String>
      <x:String>UiPath.GSuite.Activities.Filters</x:String>
      <x:String>UiPath.GSuite.Gmail.Enums</x:String>
      <x:String>UiPath.GSuite.Activities</x:String>
      <x:String>UiPath.Shared.Activities.ConnectionService.Contracts</x:String>
      <x:String>UiPath.GSuite.Activities.Gmail.Models</x:String>
      <x:String>UiPath.Shared.Activities.Business</x:String>
      <x:String>UiPath.GSuite.Activities.General.Enums</x:String>
      <x:String>UiPath.GSuite.Activities.Drive.Enums</x:String>
      <x:String>UiPath.GSuite.Activities.Enums</x:String>
      <x:String>UiPath.Shared.Api.Google.Gmail.Contracts</x:String>
      <x:String>UiPath.GSuite</x:String>
      <x:String>UiPath.GSuite.Activities.Models</x:String>
      <x:String>UiPath.GSuite.Drive.Models</x:String>
      <x:String>UiPath.UIAutomationNext.Activities.Models</x:String>
      <x:String>UiPath.Word</x:String>
      <x:String>UiPath.Word.Activities</x:String>
      <x:String>Microsoft.Office.Interop.Word</x:String>
      <x:String>UiPath.IntegrationService.Activities.Runtime.Models.FilterBuilder</x:String>
      <x:String>UiPath.IntegrationService.Activities.Runtime.Models</x:String>
      <x:String>UiPath.IntegrationService.Activities.Runtime.Helpers.TypeDetailsCustomization</x:String>
      <x:String>UiPath.IntegrationService.Activities.Runtime.Activities</x:String>
      <x:String>UiPath.Platform.Activities</x:String>
      <x:String>UiPath.Core.Activities.Orchestrator</x:String>
      <x:String>System.Text</x:String>
    </sco:Collection>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <sco:Collection x:TypeArguments="AssemblyReference">
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>PresentationCore</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>System.ComponentModel.TypeConverter</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Data.Common</AssemblyReference>
      <AssemblyReference>System.Data.DataSetExtensions</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Drawing.Common</AssemblyReference>
      <AssemblyReference>System.Drawing.Primitives</AssemblyReference>
      <AssemblyReference>System.Linq</AssemblyReference>
      <AssemblyReference>System.Net.Mail</AssemblyReference>
      <AssemblyReference>System.ObjectModel</AssemblyReference>
      <AssemblyReference>System.Private.CoreLib</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
      <AssemblyReference>UiPath.Studio.Constants</AssemblyReference>
      <AssemblyReference>System.Reflection.DispatchProxy</AssemblyReference>
      <AssemblyReference>System.Reflection.TypeExtensions</AssemblyReference>
      <AssemblyReference>System.Reflection.Metadata</AssemblyReference>
      <AssemblyReference>System.Memory.Data</AssemblyReference>
      <AssemblyReference>UiPath.Excel.Activities.Design</AssemblyReference>
      <AssemblyReference>System.Console</AssemblyReference>
      <AssemblyReference>System.Security.Permissions</AssemblyReference>
      <AssemblyReference>System.Configuration.ConfigurationManager</AssemblyReference>
      <AssemblyReference>System.ComponentModel</AssemblyReference>
      <AssemblyReference>System.Memory</AssemblyReference>
      <AssemblyReference>System.Private.Uri</AssemblyReference>
      <AssemblyReference>System.Private.ServiceModel</AssemblyReference>
      <AssemblyReference>System.Linq.Async</AssemblyReference>
      <AssemblyReference>System.Collections</AssemblyReference>
      <AssemblyReference>System.Collections.NonGeneric</AssemblyReference>
      <AssemblyReference>System.Linq.Expressions</AssemblyReference>
      <AssemblyReference>System.Private.DataContractSerialization</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization.Formatters</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization.Primitives</AssemblyReference>
      <AssemblyReference>System.Text.RegularExpressions</AssemblyReference>
      <AssemblyReference>System.Linq.Async.Queryable</AssemblyReference>
      <AssemblyReference>System.Linq.Parallel</AssemblyReference>
      <AssemblyReference>System.Collections.Immutable</AssemblyReference>
      <AssemblyReference>System.Linq.Queryable</AssemblyReference>
      <AssemblyReference>System.Runtime.Numerics</AssemblyReference>
      <AssemblyReference>UiPath.UIAutomationNext</AssemblyReference>
      <AssemblyReference>UiPath.UIAutomationCore</AssemblyReference>
      <AssemblyReference>UiPath.UIAutomationNext.Activities</AssemblyReference>
      <AssemblyReference>UiPath.OCR.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Testing.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Mail.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Excel.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Platform</AssemblyReference>
      <AssemblyReference>System.ComponentModel.EventBasedAsync</AssemblyReference>
      <AssemblyReference>System.ComponentModel.Primitives</AssemblyReference>
      <AssemblyReference>UiPath.CV</AssemblyReference>
      <AssemblyReference>UiPath.UIAutomationNext.Activities.Design</AssemblyReference>
      <AssemblyReference>UiPath.CV.Activities</AssemblyReference>
      <AssemblyReference>System.Data.SqlClient</AssemblyReference>
      <AssemblyReference>System.Private.Xml</AssemblyReference>
      <AssemblyReference>System.IO.FileSystem.Watcher</AssemblyReference>
      <AssemblyReference>System.IO.Packaging</AssemblyReference>
      <AssemblyReference>System.IO.FileSystem.AccessControl</AssemblyReference>
      <AssemblyReference>System.IO.FileSystem.DriveInfo</AssemblyReference>
      <AssemblyReference>UiPath.Mail</AssemblyReference>
      <AssemblyReference>Microsoft.Office.Interop.Outlook</AssemblyReference>
      <AssemblyReference>System.Windows.Forms.Design</AssemblyReference>
      <AssemblyReference>System.Runtime.InteropServices</AssemblyReference>
      <AssemblyReference>UiPath.Mail.Activities.Design</AssemblyReference>
      <AssemblyReference>UiPath.Excel</AssemblyReference>
      <AssemblyReference>System.CodeDom</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic.Forms</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic.Core</AssemblyReference>
      <AssemblyReference>UiPath.PDF.Activities</AssemblyReference>
      <AssemblyReference>UiPath.PDF</AssemblyReference>
      <AssemblyReference>UiPath.Vision.Core</AssemblyReference>
      <AssemblyReference>UiPath.OCR.Core</AssemblyReference>
      <AssemblyReference>UiPath.OCR.Contracts</AssemblyReference>
      <AssemblyReference>UiPath.Vision.OmniPage.Core</AssemblyReference>
      <AssemblyReference>UiPath.OmniPage.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Word</AssemblyReference>
      <AssemblyReference>Microsoft.Office.Interop.Word</AssemblyReference>
      <AssemblyReference>Microsoft.Office.Interop.Excel</AssemblyReference>
      <AssemblyReference>UiPath.Word.Activities.Design</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities.ViewModels</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities.Design</AssemblyReference>
      <AssemblyReference>Aspose.CAD</AssemblyReference>
      <AssemblyReference>UiPath.Web</AssemblyReference>
      <AssemblyReference>UiPath.Web.Activities</AssemblyReference>
      <AssemblyReference>UiPath.CodedWorkflows</AssemblyReference>
      <AssemblyReference>netstandard</AssemblyReference>
      <AssemblyReference>Newtonsoft.Json</AssemblyReference>
      <AssemblyReference>System.Collections.Specialized</AssemblyReference>
      <AssemblyReference>UiPath.GSuite</AssemblyReference>
      <AssemblyReference>UiPath.GSuite.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Word.Activities</AssemblyReference>
      <AssemblyReference>Microsoft.Extensions.DependencyModel</AssemblyReference>
      <AssemblyReference>UiPath.IntegrationService.Activities.Runtime</AssemblyReference>
      <AssemblyReference>ForumPlayground.Core</AssemblyReference>
      <AssemblyReference>System.Text.Encoding.CodePages</AssemblyReference>
    </sco:Collection>
  </TextExpression.ReferencesForImplementation>
  <sap:WorkflowViewStateService.ViewState>
    <scg:Dictionary x:TypeArguments="x:String, x:Object">
      <x:Boolean x:Key="ShouldExpandAll">False</x:Boolean>
      <x:Boolean x:Key="ShouldCollapseAll">False</x:Boolean>
    </scg:Dictionary>
  </sap:WorkflowViewStateService.ViewState>
  <Sequence DisplayName="Main Sequence" sap:VirtualizedContainerService.HintSize="1468.8000000000002,562.84" sap2010:WorkflowViewState.IdRef="Sequence_1">
    <Sequence.Variables>
      <Variable x:TypeArguments="x:String" Name="textOutput" />
      <Variable x:TypeArguments="sd:DataTable" Name="dt_InputData" />
      <Variable x:TypeArguments="sd:DataTable" Name="dt_OutputData" />
      <Variable x:TypeArguments="scg:List(x:Int32)" Name="insertIndexes" />
      <Variable x:TypeArguments="x:String" Name="InvoiceDue" />
      <Variable x:TypeArguments="x:String" Name="invoiceTotal" />
      <Variable x:TypeArguments="x:Int32" Default="80" Name="v1" />
      <Variable x:TypeArguments="x:Int32" Default="87" Name="v2" />
      <Variable x:TypeArguments="x:Double" Name="final" />
      <Variable x:TypeArguments="x:Double" Name="doublev" />
      <Variable x:TypeArguments="sd:DataTable" Name="dt2" />
      <Variable x:TypeArguments="s:String[]" Name="AttachmentArray" />
      <Variable x:TypeArguments="x:String" Name="stringvar" />
      <Variable x:TypeArguments="x:Double" Name="total" />
      <Variable x:TypeArguments="x:String" Name="content" />
      <Variable x:TypeArguments="upr:ILocalResource" Name="attched" />
      <Variable x:TypeArguments="x:Int32" Name="status" />
      <Variable x:TypeArguments="njl:JObject" Name="jsonObject" />
      <Variable x:TypeArguments="x:Boolean" Default="False" Name="hasValue" />
      <Variable x:TypeArguments="ugm:GmailMessage" Name="messageList" />
      <Variable x:TypeArguments="scg:List(ugm:GmailMessage)" Name="messageLists" />
      <Variable x:TypeArguments="scg:IEnumerable(scg:IEnumerable(sd:DataRow))" Name="grouped" />
      <Variable x:TypeArguments="sd:DataTable" Name="dt_temp" />
      <Variable x:TypeArguments="x:String" Name="wordInput" />
      <Variable x:TypeArguments="s:String[]" Name="arrayLines" />
      <Variable x:TypeArguments="x:String" Name="finalString" />
      <Variable x:TypeArguments="scg:IEnumerable(str:Match)" Name="listItems" />
      <Variable x:TypeArguments="x:String" Name="path" />
    </Sequence.Variables>
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <ui:CopyFolderX ContinueOnError="{x:Null}" DisplayName="Copy Folder" From="C:\Users\sanjay.bhat\OneDrive - Novigo Solutions Pvt. Ltd\Documents\msg" sap:VirtualizedContainerService.HintSize="416,192" sap2010:WorkflowViewState.IdRef="CopyFolderX_1" IncludeSubfolders="True" Overwrite="False" To="C:\Users\sanjay.bhat\OneDrive - Novigo Solutions Pvt. Ltd\Documents\UiPath\ForumPlayground\msg" />
    <TryCatch DisplayName="Try Catch" sap:VirtualizedContainerService.HintSize="416,48" sap2010:WorkflowViewState.IdRef="TryCatch_1">
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">False</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
      <TryCatch.Try>
        <ui:InvokeCode ContinueOnError="{x:Null}" Code="&#xA;&#xA;' ---------- read -------------------------------------------------------&#xA;Dim txt As String = File.ReadAllText(&quot;&quot;, Encoding.UTF8).Replace(vbCr, &quot;&quot;)&#xA;Dim lines() As String = txt.Split({vbLf}, StringSplitOptions.None)&#xA;&#xA;' ---------- regex ------------------------------------------------------&#xA;Dim rx25 = New Regex(&quot;^:25:(?&lt;acct&gt;\d+)&quot;)&#xA;Dim rx60 = New Regex(&quot;^:60[FM]:(?&lt;dc&gt;[CD])(?&lt;d&gt;\d{6})(?&lt;cur&gt;[A-Z]{3})(?&lt;amt&gt;[\d,]+)&quot;)&#xA;Dim rx61 = New Regex(&quot;^:61:(?&lt;val&gt;\d{6})(?&lt;entry&gt;\d{4})?(?&lt;dc&gt;[CD])(?&lt;fund&gt;[A-Z])?(?&lt;amt&gt;[\d,]+)(?&lt;code&gt;[A-Z]{4})(?&lt;rest&gt;.*)&quot;)&#xA;Dim rx86 = New Regex(&quot;^:86:(?&lt;desc&gt;.*)&quot;)&#xA;&#xA;' ---------- accumulators ----------------------------------------------&#xA;Dim sbRows As New StringBuilder()&#xA;&#xA;Dim account As String = &quot;&quot;&#xA;Dim dateFrom As String = &quot;&quot;&#xA;Dim dateTo As String = &quot;&quot;&#xA;Dim openingBal As String = &quot;&quot;&#xA;&#xA;Dim balSet As Boolean = False&#xA;Dim bal As Decimal = 0D&#xA;&#xA;Dim totCred As Decimal = 0D&#xA;Dim totDeb As Decimal = 0D&#xA;Dim cntCred As Integer = 0&#xA;Dim cntDeb As Integer = 0&#xA;&#xA;' ---------- per‑transaction buffers -----------------------------------&#xA;Dim valDt$, entryDt$, dc$, amt$, code$, custRef$, bankRef$, txnDesc$, payDet$&#xA;&#xA;Dim instr As String, escDesc As String, escPay As String&#xA;Dim mNum As Match&#xA;&#xA;' ---------- main loop --------------------------------------------------&#xA;For Each raw In lines&#xA;    Dim line As String = raw.Trim()&#xA;    If line.StartsWith(&quot;{&quot;) AndAlso Not line.StartsWith(&quot;:&quot;) Then Continue For&#xA;&#xA;    If account = &quot;&quot; AndAlso rx25.IsMatch(line) Then&#xA;        account = rx25.Match(line).Groups(&quot;acct&quot;).Value&#xA;        Continue For&#xA;    End If&#xA;&#xA;    If Not balSet AndAlso rx60.IsMatch(line) Then&#xA;        Dim m = rx60.Match(line)&#xA;        bal = Decimal.Parse(m.Groups(&quot;amt&quot;).Value.Replace(&quot;,&quot;c,&quot;.&quot;c), CultureInfo.InvariantCulture)&#xA;        If m.Groups(&quot;dc&quot;).Value = &quot;D&quot; Then bal = -bal&#xA;        openingBal = bal.ToString(&quot;0.00&quot;, CultureInfo.InvariantCulture)&#xA;        balSet = True&#xA;        Continue For&#xA;    End If&#xA;&#xA;    If rx61.IsMatch(line) Then&#xA;        ' ---------- flush previous transaction --------------------------&#xA;        If valDt &lt;&gt; &quot;&quot; Then&#xA;            Dim delta As Decimal = Decimal.Parse(amt, CultureInfo.InvariantCulture)&#xA;            If dc = &quot;D&quot; Then&#xA;                bal -= delta : totDeb += delta : cntDeb += 1&#xA;            Else&#xA;                bal += delta : totCred += delta : cntCred += 1&#xA;            End If&#xA;&#xA;            Dim vDate As Date = Date.ParseExact(valDt, &quot;yyMMdd&quot;, CultureInfo.InvariantCulture)&#xA;            Dim tDate As Date = vDate&#xA;            If entryDt &lt;&gt; &quot;&quot; Then tDate = New Date(vDate.Year, CInt(entryDt.Substring(0,2)), CInt(entryDt.Substring(2,2)))&#xA;&#xA;            instr = &quot;&quot;&#xA;            mNum = Regex.Match(custRef, &quot;\d+&quot;)&#xA;            If mNum.Success Then instr = mNum.Value&#xA;            If instr = &quot;&quot; Then&#xA;                mNum = Regex.Match(bankRef, &quot;\d+&quot;)&#xA;                If mNum.Success Then instr = mNum.Value&#xA;            End If&#xA;            If instr = &quot;&quot; Then&#xA;                mNum = Regex.Match(txnDesc, &quot;\d+&quot;)&#xA;                If mNum.Success Then instr = mNum.Value&#xA;            End If&#xA;&#xA;            escDesc = &quot;&quot;&quot;&quot; &amp; txnDesc.Trim().Replace(&quot;&quot;&quot;&quot;, &quot;&quot;&quot;&quot;&quot;&quot;) &amp; &quot;&quot;&quot;&quot;&#xA;            escPay  = &quot;&quot;&quot;&quot; &amp; payDet.Trim().Replace(&quot;&quot;&quot;&quot;, &quot;&quot;&quot;&quot;&quot;&quot;) &amp; &quot;&quot;&quot;&quot;&#xA;&#xA;            sbRows.AppendLine(String.Join(&quot;,&quot;, {&#xA;                tDate.ToString(&quot;yyyy-MM-dd&quot;),&#xA;                vDate.ToString(&quot;yyyy-MM-dd&quot;),&#xA;                instr,&#xA;                escDesc,&#xA;                If(dc = &quot;D&quot;, amt, &quot;&quot;),&#xA;                If(dc = &quot;C&quot;, amt, &quot;&quot;),&#xA;                bal.ToString(CultureInfo.InvariantCulture),&#xA;                code, custRef, bankRef,&#xA;                escPay&#xA;            }))&#xA;        End If&#xA;&#xA;        ' ---------- start new transaction ------------------------------&#xA;        Dim n = rx61.Match(line)&#xA;        valDt   = n.Groups(&quot;val&quot;).Value&#xA;        If dateFrom = &quot;&quot; Then dateFrom = valDt&#xA;        dateTo  = valDt&#xA;        entryDt = n.Groups(&quot;entry&quot;).Value&#xA;        dc      = n.Groups(&quot;dc&quot;).Value&#xA;        amt     = n.Groups(&quot;amt&quot;).Value.Replace(&quot;,&quot;c,&quot;.&quot;c)&#xA;        code    = n.Groups(&quot;code&quot;).Value&#xA;        custRef = &quot;&quot; : bankRef = &quot;&quot; : txnDesc = &quot;&quot; : payDet = &quot;&quot;&#xA;&#xA;        ' ---------- choose Customer vs Bank reference -------------------------&#xA;Dim rest = n.Groups(&quot;rest&quot;).Value.Trim()&#xA;&#xA;If rest.Contains(&quot;//&quot;) Then&#xA;    Dim parts = rest.Split({&quot;//&quot;}, StringSplitOptions.None)&#xA;    Dim p1 As String = parts(0).Trim()   ' first chunk before //&#xA;    Dim p2 As String = parts(1).Trim()   ' second chunk after  //&#xA;&#xA;    ' 1) For NMSC transactions → first part is BankRef, CustomerRef is empty&#xA;    ' 2) Heuristic: 10‑digit // 14‑16‑digit  → same rule as NMSC&#xA;    If code = &quot;NMSC&quot; _&#xA;       OrElse (Regex.IsMatch(p1, &quot;^\d{10}$&quot;) AndAlso Regex.IsMatch(p2, &quot;^\d{14,16}$&quot;)) Then&#xA;&#xA;        bankRef = p1&#xA;        custRef = &quot;&quot;&#xA;        payDet  = p2                      ' keep the trailing number in payment‑details&#xA;&#xA;    Else&#xA;        ' default rule – first chunk = CustomerRef, second = BankRef&#xA;        custRef = p1&#xA;        bankRef = p2&#xA;    End If&#xA;&#xA;Else&#xA;    ' no // delimiter → treat entire tail as CustomerRef&#xA;    custRef = rest&#xA;End If&#xA;' ----------------------------------------------------------------------&#xA;If custRef = bankRef Then custRef = &quot;&quot;&#xA;        Continue For&#xA;    End If&#xA;&#xA;    ' ---------- free text &amp; :86: --------------------------------------&#xA;    If rx86.IsMatch(line) Then&#xA;        Dim txtLine = rx86.Match(line).Groups(&quot;desc&quot;).Value.Trim()&#xA;        If txnDesc = &quot;&quot; Then txnDesc = txtLine Else payDet &amp;= &quot; &quot; &amp; txtLine&#xA;    ElseIf valDt &lt;&gt; &quot;&quot; AndAlso Not line.StartsWith(&quot;:&quot;) Then&#xA;        If txnDesc = &quot;&quot; Then txnDesc = line Else payDet &amp;= &quot; &quot; &amp; line&#xA;    End If&#xA;Next&#xA;&#xA;' ---------- flush last transaction ------------------------------------&#xA;If valDt &lt;&gt; &quot;&quot; Then&#xA;    Dim delta As Decimal = Decimal.Parse(amt, CultureInfo.InvariantCulture)&#xA;    If dc = &quot;D&quot; Then&#xA;        bal -= delta : totDeb += delta : cntDeb += 1&#xA;    Else&#xA;        bal += delta : totCred += delta : cntCred += 1&#xA;    End If&#xA;&#xA;    Dim vDate As Date = Date.ParseExact(valDt, &quot;yyMMdd&quot;, CultureInfo.InvariantCulture)&#xA;    Dim tDate As Date = vDate&#xA;    If entryDt &lt;&gt; &quot;&quot; Then tDate = New Date(vDate.Year, CInt(entryDt.Substring(0,2)), CInt(entryDt.Substring(2,2)))&#xA;&#xA;    instr = &quot;&quot;&#xA;    mNum = Regex.Match(custRef, &quot;\d+&quot;)&#xA;    If mNum.Success Then instr = mNum.Value&#xA;    If instr = &quot;&quot; Then&#xA;        mNum = Regex.Match(bankRef, &quot;\d+&quot;)&#xA;        If mNum.Success Then instr = mNum.Value&#xA;    End If&#xA;    If instr = &quot;&quot; Then&#xA;        mNum = Regex.Match(txnDesc, &quot;\d+&quot;)&#xA;        If mNum.Success Then instr = mNum.Value&#xA;    End If&#xA;&#xA;    escDesc = &quot;&quot;&quot;&quot; &amp; txnDesc.Trim().Replace(&quot;&quot;&quot;&quot;, &quot;&quot;&quot;&quot;&quot;&quot;) &amp; &quot;&quot;&quot;&quot;&#xA;    escPay  = &quot;&quot;&quot;&quot; &amp; payDet.Trim().Replace(&quot;&quot;&quot;&quot;, &quot;&quot;&quot;&quot;&quot;&quot;) &amp; &quot;&quot;&quot;&quot;&#xA;&#xA;    sbRows.AppendLine(String.Join(&quot;,&quot;, {&#xA;        tDate.ToString(&quot;yyyy-MM-dd&quot;),&#xA;        vDate.ToString(&quot;yyyy-MM-dd&quot;),&#xA;        instr,&#xA;        escDesc,&#xA;        If(dc = &quot;D&quot;, amt, &quot;&quot;),&#xA;        If(dc = &quot;C&quot;, amt, &quot;&quot;),&#xA;        bal.ToString(CultureInfo.InvariantCulture),&#xA;        code, custRef, bankRef,&#xA;        escPay&#xA;    }))&#xA;End If&#xA;&#xA;' ---------- build final CSV -------------------------------------------&#xA;Dim sbFinal As New StringBuilder()&#xA;&#xA;If dateFrom &lt;&gt; &quot;&quot; Then&#xA;    Dim dFrom = Date.ParseExact(dateFrom, &quot;yyMMdd&quot;, CultureInfo.InvariantCulture).ToString(&quot;dd-MM-yyyy&quot;)&#xA;    Dim dTo   = Date.ParseExact(dateTo,   &quot;yyMMdd&quot;, CultureInfo.InvariantCulture).ToString(&quot;dd-MM-yyyy&quot;)&#xA;    sbFinal.AppendLine($&quot;Account Number,{account},Date From,{dFrom},Date To,{dTo}&quot;)&#xA;    sbFinal.AppendLine($&quot;Opening balance for the period:,{openingBal}&quot;)&#xA;End If&#xA;&#xA;sbFinal.AppendLine(&quot;Transaction Date,Value Date,Instrument No,Transaction Description,Debit Amount,Credit Amount,Balance,Transaction Code,Customer Reference,Bank Reference,Payment Details&quot;)&#xA;sbFinal.Append(sbRows.ToString())&#xA;&#xA;' ---------- summary lines ---------------------------------------------&#xA;sbFinal.AppendLine($&quot;Closing balance for the period:,{bal.ToString(&quot;0.00&quot;, CultureInfo.InvariantCulture)}&quot;)&#xA;sbFinal.AppendLine($&quot;Total Credits for the Period:,{totCred.ToString(&quot;0.00&quot;, CultureInfo.InvariantCulture)}&quot;)&#xA;sbFinal.AppendLine($&quot;Total Number of Transactions (Credit):,{cntCred}&quot;)&#xA;sbFinal.AppendLine($&quot;Total Debits for the Period :,{totDeb.ToString(&quot;0.00&quot;, CultureInfo.InvariantCulture)}&quot;)&#xA;sbFinal.AppendLine($&quot;Total Number of Transactions (Debit):,{cntDeb}&quot;)&#xA;sbFinal.AppendLine($&quot;Available Balance:,{bal.ToString(&quot;0.00&quot;, CultureInfo.InvariantCulture)}&quot;)&#xA;sbFinal.AppendLine(&quot;Uncollected Balance:,0&quot;)&#xA;sbFinal.AppendLine(&quot;Blocked Balance:,0&quot;)&#xA;sbFinal.AppendLine(&quot;Sub Account Balance:,0&quot;)&#xA;sbFinal.AppendLine(&quot;Receivable Balance:,0&quot;)&#xA;&#xA;' ---------- write &amp; message -------------------------------------------&#xA;File.WriteAllText(out_CsvPath, sbFinal.ToString(), Encoding.UTF8)&#xA;out_Message = $&quot;Converted to CSV with summaries: {out_CsvPath}&quot;&#xA;" DisplayName="Invoke Code" sap:VirtualizedContainerService.HintSize="333.6,164.8" sap2010:WorkflowViewState.IdRef="InvokeCode_7">
          <ui:InvokeCode.Arguments>
            <InArgument x:TypeArguments="x:String" x:Key="in_FilePath">C:\Users\sanjay.bhat\OneDrive - Novigo Solutions Pvt. Ltd\Documents\UiPath\ForumPlayground\1751958161128.txt</InArgument>
            <InArgument x:TypeArguments="x:String" x:Key="out_CsvPath">C:\Users\sanjay.bhat\OneDrive - Novigo Solutions Pvt. Ltd\Documents\UiPath\ForumPlayground\InputExcel.csv</InArgument>
            <OutArgument x:TypeArguments="x:String" x:Key="out_Message">[stringvar]</OutArgument>
          </ui:InvokeCode.Arguments>
        </ui:InvokeCode>
      </TryCatch.Try>
      <TryCatch.Catches>
        <Catch x:TypeArguments="s:Exception" sap:VirtualizedContainerService.HintSize="400,106.4" sap2010:WorkflowViewState.IdRef="Catch`1_1">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              <x:Boolean x:Key="IsPinned">False</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <ActivityAction x:TypeArguments="s:Exception">
            <ActivityAction.Argument>
              <DelegateInArgument x:TypeArguments="s:Exception" Name="exception" />
            </ActivityAction.Argument>
          </ActivityAction>
        </Catch>
      </TryCatch.Catches>
    </TryCatch>
  </Sequence>
</Activity>